{"version":3,"sources":["components/Container/Container.styles.jsx","components/Container/Container.js","components/Button/Button.styled.jsx","components/Button/Button.js","components/Form/Form.styled.jsx","components/Form/Form.js","components/Contact/ContactList.styled.jsx","components/Contact/ContactList.js","components/Contact/Contact.js","components/Filter/Filter.js","App.js","index.js"],"names":["Wrapper","styled","div","Container","children","Button","button","ButtonItem","text","type","FormItem","form","Input","input","Form","state","name","id","number","handleChange","target","value","randomId","uuidv4","slice","setState","handleSubmit","e","preventDefault","getData","props","resetForm","onSubmit","this","onChange","pattern","title","required","placeholder","Component","ContactList","data","onDeleteNameItem","map","onClick","Contact","Filter","filter","App","contacts","newContacts","updateContacts","newData","some","item","alert","prevState","handleFilterByName","renderListName","array","toLowerCase","includes","deleteNameItem","localStor","localStorage","getItem","parseLocalStor","JSON","parse","prevProps","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById","querySelector"],"mappings":"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","file":"static/js/main.007ca557.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\r\n\r\nexport const Wrapper = styled.div`\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    padding:20px 20px; \r\n`","import { Wrapper } from \"./Container.styles\"\r\n\r\nexport const Container = ({children}) => {\r\n    return (\r\n        <Wrapper>{children}</Wrapper>\r\n    )\r\n}","import styled from \"@emotion/styled\";\r\n\r\nexport const Button = styled.button`\r\nwidth:120px\r\n`","import { Button } from \"./Button.styled\";\r\n\r\nfunction ButtonItem({ text }) {\r\n  return <Button type=\"submit\">{text}</Button>;\r\n}\r\n\r\nexport default ButtonItem;\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const FormItem = styled.form`\r\ndisplay:flex;\r\nflex-direction:column;\r\nwidth:250px\r\n`\r\nexport const Input = styled.input`\r\nmargin-bottom: 20px;\r\n\r\n`","// import PropTypes from 'prop-types';\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { Component } from \"react\";\r\nimport ButtonItem from \"../Button\";\r\nimport PropTypes from \"prop-types\";\r\n// style\r\nimport { FormItem, Input } from \"./Form.styled.jsx\";\r\n\r\nclass Form extends Component {\r\n  state = {\r\n    name: \"\",\r\n    id: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  handleChange = ({ target }) => {\r\n    const { name, value } = target;\r\n    const randomId = uuidv4().slice(0, 5);\r\n    this.setState({\r\n      [name]: value,\r\n      id: randomId,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { getData } = this.props;\r\n    const contactData = this.state;\r\n    getData(contactData);\r\n    this.resetForm();\r\n  };\r\n\r\n  resetForm = () => {\r\n    this.setState({\r\n      name: \"\",\r\n      id: \"\",\r\n      number: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div>\r\n          <FormItem onSubmit={this.handleSubmit}>\r\n            <Input\r\n              type=\"text\"\r\n              value={this.state.name}\r\n              name=\"name\"\r\n              onChange={this.handleChange}\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              placeholder=\"Name\"\r\n            />\r\n            <Input\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              value={this.state.number}\r\n              onChange={this.handleChange}\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n              placeholder=\"Phone number\"\r\n            />\r\n            <ButtonItem text=\"Add contact\" />\r\n          </FormItem>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n\r\nForm.propTypes = {\r\n  handleChange: PropTypes.func,\r\n  getData: PropTypes.func,\r\n  handleSubmit: PropTypes.func,\r\n  resetForm: PropTypes.func,\r\n};\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const Button = styled.button`\r\nmargin-left:20px\r\n`","import { Button } from \"./ContactList.styled\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction ContactList({ data, onDeleteNameItem }) {\r\n  return (\r\n    <>\r\n      {data.map(({ name, id, number }) => (\r\n        <li key={id}>\r\n          {name} : {number}\r\n          <Button onClick={() => onDeleteNameItem(id)}>Delete</Button>\r\n        </li>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  data: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      id: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n};\r\n\r\nexport default ContactList;\r\n","import ContactList from \"./ContactList\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Contact({ data, onDeleteNameItem }) {\r\n  return (\r\n    <>\r\n      <ul>\r\n        <ContactList\r\n          data={data}\r\n          onDeleteNameItem={onDeleteNameItem}\r\n        ></ContactList>\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n\r\nContact.propTypes = {\r\n  data: PropTypes.array,\r\n  onDeleteNameItem: PropTypes.func,\r\n};\r\n\r\nexport default Contact;\r\n","import PropTypes from \"prop-types\";\r\n\r\nfunction Filter({ filter, onChange }) {\r\n  return (\r\n    <>\r\n      <p>Find Contacts by name</p>\r\n      <input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={filter}\r\n        onChange={onChange}\r\n      ></input>\r\n    </>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\nexport default Filter;\r\n","import { Container } from \"./components/Container/Container\";\r\nimport { Component } from \"react\";\r\nimport Form from \"./components/Form\";\r\nimport Contact from \"./components/Contact\";\r\nimport Filter from \"./components/Filter\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    contacts: [],\r\n\r\n    filter: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    const localStor = localStorage.getItem(\"contacts\");\r\n    const parseLocalStor = JSON.parse(localStor);\r\n    if (parseLocalStor) {\r\n      this.setState({\r\n        contacts: parseLocalStor,\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.contacts !== this.state.contacts) {\r\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\r\n    }\r\n  }\r\n\r\n  getData = (data) => {\r\n    const newContacts = {\r\n      name: data.name,\r\n      id: data.id,\r\n      number: data.number,\r\n    };\r\n    this.updateContacts(newContacts);\r\n  };\r\n\r\n  updateContacts = (newData) => {\r\n    this.state.contacts.some((item) => item.name === newData.name)\r\n      ? alert(`${newData.name} is already in contacts`)\r\n      : this.setState((prevState) => ({\r\n          contacts: [newData, ...prevState.contacts],\r\n        }));\r\n  };\r\n\r\n  handleFilterByName = (e) => {\r\n    const value = e.target.value;\r\n    this.setState({\r\n      filter: value,\r\n    });\r\n  };\r\n\r\n  renderListName = (array, name) => {\r\n    return array.filter((item) =>\r\n      item.name.toLowerCase().includes(name.toLowerCase())\r\n    );\r\n  };\r\n\r\n  deleteNameItem = (id) => {\r\n    this.setState((prevState) => ({\r\n      contacts: prevState.contacts.filter((item) => item.id !== id),\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    // console.log(\"render\", this.state.contacts);\r\n    const { contacts, filter } = this.state;\r\n\r\n    return (\r\n      <Container>\r\n        <h2>Phonebook</h2>\r\n        <Form getData={this.getData} />\r\n        <h2>Contacts</h2>\r\n        <Filter filter={filter} onChange={this.handleFilterByName} />\r\n        <Contact\r\n          data={this.renderListName(contacts, filter)}\r\n          onDeleteNameItem={this.deleteNameItem}\r\n        ></Contact>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nReactDOM.render(<App />, document.querySelector('#root'));"],"sourceRoot":""}